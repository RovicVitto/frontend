{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sebas\\\\Documents\\\\spist-online-learning-hub\\\\frontend\\\\src\\\\components\\\\QuizSubject.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './QuizSubject.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst shuffleArray = array => {\n  const newArr = [...array];\n  for (let i = newArr.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [newArr[i], newArr[j]] = [newArr[j], newArr[i]];\n  }\n  return newArr;\n};\nconst QuizSubject = ({\n  category,\n  questions,\n  onBack\n}) => {\n  _s();\n  const [availableQuestions, setAvailableQuestions] = useState([]);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0); // Track current question index\n  const [selectedAnswer, setSelectedAnswer] = useState('');\n  const [score, setScore] = useState(0);\n  const [feedback, setFeedback] = useState('');\n  const [quizFinished, setQuizFinished] = useState(false);\n  const [correctAnswers, setCorrectAnswers] = useState(0); // Track correct answers count\n\n  useEffect(() => {\n    if (category && questions[category] && questions[category].length > 0) {\n      const flattenedQuestions = questions[category].flat(); // Flatten the array if necessary\n      const shuffled = shuffleArray(flattenedQuestions);\n      setAvailableQuestions(shuffled);\n      setCurrentQuestionIndex(0);\n      setScore(0);\n      setSelectedAnswer('');\n      setFeedback('');\n      setQuizFinished(false);\n      setCorrectAnswers(0); // Reset the correct answers count\n    }\n  }, [category, questions]);\n  const getNextQuestion = () => {\n    const nextIndex = currentQuestionIndex + 1;\n    if (nextIndex >= availableQuestions.length) {\n      setQuizFinished(true);\n    } else {\n      setCurrentQuestionIndex(nextIndex);\n      setSelectedAnswer('');\n      setFeedback('');\n    }\n  };\n  const handleSubmit = () => {\n    if (!selectedAnswer) return;\n    const currentQuestion = availableQuestions[currentQuestionIndex];\n    if (selectedAnswer === currentQuestion.answer) {\n      setScore(prev => prev + 1);\n      setCorrectAnswers(prev => prev + 1); // Increment the correct answer count\n      setFeedback('Correct!');\n      setTimeout(() => {\n        getNextQuestion();\n      }, 1000);\n    } else {\n      setFeedback('Incorrect!');\n      setQuizFinished(true); // End the quiz when user answers incorrectly\n    }\n\n    // If 3 correct answers, end the quiz after a correct answer\n    if (correctAnswers + 1 >= 3) {\n      // Add +1 since correctAnswers has already been updated\n      setQuizFinished(true);\n    }\n  };\n  if (quizFinished) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"quiz-page\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [category, \" Quiz\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Quiz finished!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Your Score: \", score]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"back-btn\",\n        onClick: onBack,\n        children: \"\\u2190 Back to Categories\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this);\n  }\n  if (availableQuestions.length === 0 || currentQuestionIndex >= availableQuestions.length) {\n    return null; // Ensure we don't try to render when there are no questions\n  }\n  const currentQuestion = availableQuestions[currentQuestionIndex];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"quiz-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"quiz-info-bar\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"score-display\",\n        children: [\"Score: \", score]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"quiz-title\",\n      children: [category, \" Quiz\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"quiz-question\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: currentQuestion.question\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 12\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"quiz-options\",\n        children: currentQuestion.options.map((option, i) => /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"radio\",\n            name: \"quiz\",\n            value: option,\n            checked: selectedAnswer === option,\n            onChange: () => setSelectedAnswer(option)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 15\n          }, this), option]\n        }, i, true, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"submit-btn\",\n        onClick: handleSubmit,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this), feedback && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"feedback\",\n        children: feedback\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 22\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"back-btn\",\n      onClick: onBack,\n      children: \"\\u2190 Back to Categories\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n};\n_s(QuizSubject, \"ViSeMRk1z02kGBt70fAhJv+2GsE=\");\n_c = QuizSubject;\nexport default QuizSubject;\nvar _c;\n$RefreshReg$(_c, \"QuizSubject\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","shuffleArray","array","newArr","i","length","j","Math","floor","random","QuizSubject","category","questions","onBack","_s","availableQuestions","setAvailableQuestions","currentQuestionIndex","setCurrentQuestionIndex","selectedAnswer","setSelectedAnswer","score","setScore","feedback","setFeedback","quizFinished","setQuizFinished","correctAnswers","setCorrectAnswers","flattenedQuestions","flat","shuffled","getNextQuestion","nextIndex","handleSubmit","currentQuestion","answer","prev","setTimeout","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","question","options","map","option","type","name","value","checked","onChange","_c","$RefreshReg$"],"sources":["C:/Users/sebas/Documents/spist-online-learning-hub/frontend/src/components/QuizSubject.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './QuizSubject.css';\r\n\r\nconst shuffleArray = (array) => {\r\n  const newArr = [...array];\r\n  for (let i = newArr.length - 1; i > 0; i--) {\r\n    const j = Math.floor(Math.random() * (i + 1));\r\n    [newArr[i], newArr[j]] = [newArr[j], newArr[i]];\r\n  }\r\n  return newArr;\r\n};\r\n\r\nconst QuizSubject = ({ category, questions, onBack }) => {\r\n  const [availableQuestions, setAvailableQuestions] = useState([]);\r\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0); // Track current question index\r\n  const [selectedAnswer, setSelectedAnswer] = useState('');\r\n  const [score, setScore] = useState(0);\r\n  const [feedback, setFeedback] = useState('');\r\n  const [quizFinished, setQuizFinished] = useState(false);\r\n  const [correctAnswers, setCorrectAnswers] = useState(0); // Track correct answers count\r\n\r\n  useEffect(() => {\r\n    if (category && questions[category] && questions[category].length > 0) {\r\n      const flattenedQuestions = questions[category].flat(); // Flatten the array if necessary\r\n      const shuffled = shuffleArray(flattenedQuestions);\r\n      setAvailableQuestions(shuffled);\r\n      setCurrentQuestionIndex(0);\r\n      setScore(0);\r\n      setSelectedAnswer('');\r\n      setFeedback('');\r\n      setQuizFinished(false);\r\n      setCorrectAnswers(0); // Reset the correct answers count\r\n    }\r\n  }, [category, questions]);\r\n\r\n  const getNextQuestion = () => {\r\n    const nextIndex = currentQuestionIndex + 1;\r\n    if (nextIndex >= availableQuestions.length) {\r\n      setQuizFinished(true);\r\n    } else {\r\n      setCurrentQuestionIndex(nextIndex);\r\n      setSelectedAnswer('');\r\n      setFeedback('');\r\n    }\r\n  };\r\n\r\n  const handleSubmit = () => {\r\n    if (!selectedAnswer) return;\r\n\r\n    const currentQuestion = availableQuestions[currentQuestionIndex];\r\n    if (selectedAnswer === currentQuestion.answer) {\r\n      setScore(prev => prev + 1);\r\n      setCorrectAnswers(prev => prev + 1); // Increment the correct answer count\r\n      setFeedback('Correct!');\r\n      setTimeout(() => {\r\n        getNextQuestion();\r\n      }, 1000);\r\n    } else {\r\n      setFeedback('Incorrect!');\r\n      setQuizFinished(true); // End the quiz when user answers incorrectly\r\n    }\r\n\r\n    // If 3 correct answers, end the quiz after a correct answer\r\n    if (correctAnswers + 1 >= 3) { // Add +1 since correctAnswers has already been updated\r\n      setQuizFinished(true);\r\n    }\r\n  };\r\n\r\n  if (quizFinished) {\r\n    return (\r\n      <div className=\"quiz-page\">\r\n        <h2>{category} Quiz</h2>\r\n        <p>Quiz finished!</p>\r\n        <p>Your Score: {score}</p>\r\n        <button className=\"back-btn\" onClick={onBack}>← Back to Categories</button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (availableQuestions.length === 0 || currentQuestionIndex >= availableQuestions.length) {\r\n    return null; // Ensure we don't try to render when there are no questions\r\n  }\r\n\r\n  const currentQuestion = availableQuestions[currentQuestionIndex];\r\n\r\n  return (\r\n    <div className=\"quiz-page\">\r\n      <div className=\"quiz-info-bar\">\r\n        <div className=\"score-display\">Score: {score}</div>\r\n      </div>\r\n\r\n      <h2 className=\"quiz-title\">{category} Quiz</h2>\r\n\r\n      <div className=\"quiz-question\">\r\n        <p><strong>{currentQuestion.question}</strong></p>\r\n        <div className=\"quiz-options\">\r\n          {currentQuestion.options.map((option, i) => (\r\n            <label key={i}>\r\n              <input\r\n                type=\"radio\"\r\n                name=\"quiz\"\r\n                value={option}\r\n                checked={selectedAnswer === option}\r\n                onChange={() => setSelectedAnswer(option)}\r\n              />\r\n              {option}\r\n            </label>\r\n          ))}\r\n        </div>\r\n        <button className=\"submit-btn\" onClick={handleSubmit}>Submit</button>\r\n        {feedback && <p className=\"feedback\">{feedback}</p>}\r\n      </div>\r\n\r\n      <button className=\"back-btn\" onClick={onBack}>← Back to Categories</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default QuizSubject;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}