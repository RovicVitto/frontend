{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sebas\\\\Documents\\\\spist-online-learning-hub\\\\frontend\\\\src\\\\components\\\\QuizSubject.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './QuizSubject.css'; // Import your updated CSS\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst QuizSubject = ({\n  category,\n  questions,\n  onBack\n}) => {\n  _s();\n  const [availableQuestions, setAvailableQuestions] = useState([]); // To store remaining questions\n  const [askedQuestions, setAskedQuestions] = useState([]); // To track already asked questions\n  const [currentQuestion, setCurrentQuestion] = useState(null); // To store the current question\n  const [selectedAnswer, setSelectedAnswer] = useState(''); // To store the selected answer\n  const [score, setScore] = useState(0); // To track the score\n  const [questionCount, setQuestionCount] = useState(0); // To track question number\n  const [feedback, setFeedback] = useState(''); // To display feedback (Correct/Incorrect)\n  const [quizFinished, setQuizFinished] = useState(false); // To track quiz finish state\n\n  // Shuffle questions whenever the quiz starts or resets\n  useEffect(() => {\n    if (questions.length > 0) {\n      // Create a fresh shuffled array of questions\n      const shuffledQuestions = [...questions].sort(() => Math.random() - 0.5);\n      setAvailableQuestions(shuffledQuestions);\n      setAskedQuestions([]); // Reset asked questions at the start\n      setQuizFinished(false); // Reset quiz finish state\n      getNextQuestion(shuffledQuestions); // Get the first question\n    }\n  }, [questions]); // Re-run every time the questions change (when the user selects a new category)\n\n  // Function to get the next question\n  const getNextQuestion = questionPool => {\n    if (questionPool.length === 0) {\n      // No more questions left, finish the quiz\n      setQuizFinished(true);\n      return;\n    }\n\n    // If there are still remaining questions, get the next random question\n    const randomIndex = Math.floor(Math.random() * questionPool.length);\n    const nextQuestion = questionPool[randomIndex];\n\n    // Move the question to the asked pool to prevent repetition\n    setAskedQuestions(prevAsked => [...prevAsked, nextQuestion]);\n\n    // Remove the question from available questions pool\n    setAvailableQuestions(prevAvailable => prevAvailable.filter((_, i) => i !== randomIndex));\n    setCurrentQuestion(nextQuestion); // Set the new current question\n    setSelectedAnswer(''); // Reset the selected answer\n    setFeedback(''); // Reset feedback\n  };\n\n  // Function to handle submitting the answer\n  const handleSubmit = () => {\n    if (!selectedAnswer) return; // If no answer is selected, do nothing\n\n    // Check if the selected answer is correct\n    if (selectedAnswer === currentQuestion.answer) {\n      setScore(score + 1); // Increment score for correct answer\n      setQuestionCount(questionCount + 1); // Increment question count\n      setFeedback('Correct!'); // Provide feedback for correct answer\n    } else {\n      setFeedback('Incorrect!'); // Provide feedback for incorrect answer\n      setQuizFinished(true); // End the quiz on incorrect answer\n    }\n\n    // If the answer is correct, get the next question after a brief delay\n    setTimeout(() => {\n      if (selectedAnswer === currentQuestion.answer) {\n        getNextQuestion(availableQuestions); // Move to next question if the answer was correct\n      }\n    }, 1000); // Wait 1 second before showing the next question\n  };\n\n  // If no more questions are left or the user answers incorrectly, show the results\n  if (quizFinished) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"quiz-page\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [category, \" Quiz\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Quiz finished!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Your Score: \", score]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"back-btn\",\n        onClick: onBack,\n        children: \"\\u2190 Back to Categories\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"quiz-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"quiz-title\",\n      children: [category, \" Quiz\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Score: \", score]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Question \", questionCount + 1]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"quiz-question\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: currentQuestion.question\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 12\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"quiz-options\",\n        children: currentQuestion.options.map((option, i) => /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"radio\",\n            name: \"quiz\",\n            value: option,\n            checked: selectedAnswer === option,\n            onChange: () => setSelectedAnswer(option)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 15\n          }, this), option]\n        }, i, true, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"submit-btn\",\n        onClick: handleSubmit,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this), feedback && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"feedback\",\n        children: feedback\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 22\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"back-btn\",\n      onClick: onBack,\n      children: \"\\u2190 Back to Categories\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n};\n_s(QuizSubject, \"1Ks0kF5gnmKnQZpuIXiCvaN6AJU=\");\n_c = QuizSubject;\nexport default QuizSubject;\nvar _c;\n$RefreshReg$(_c, \"QuizSubject\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","QuizSubject","category","questions","onBack","_s","availableQuestions","setAvailableQuestions","askedQuestions","setAskedQuestions","currentQuestion","setCurrentQuestion","selectedAnswer","setSelectedAnswer","score","setScore","questionCount","setQuestionCount","feedback","setFeedback","quizFinished","setQuizFinished","length","shuffledQuestions","sort","Math","random","getNextQuestion","questionPool","randomIndex","floor","nextQuestion","prevAsked","prevAvailable","filter","_","i","handleSubmit","answer","setTimeout","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","question","options","map","option","type","name","value","checked","onChange","_c","$RefreshReg$"],"sources":["C:/Users/sebas/Documents/spist-online-learning-hub/frontend/src/components/QuizSubject.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './QuizSubject.css'; // Import your updated CSS\r\n\r\nconst QuizSubject = ({ category, questions, onBack }) => {\r\n  const [availableQuestions, setAvailableQuestions] = useState([]); // To store remaining questions\r\n  const [askedQuestions, setAskedQuestions] = useState([]); // To track already asked questions\r\n  const [currentQuestion, setCurrentQuestion] = useState(null); // To store the current question\r\n  const [selectedAnswer, setSelectedAnswer] = useState(''); // To store the selected answer\r\n  const [score, setScore] = useState(0); // To track the score\r\n  const [questionCount, setQuestionCount] = useState(0); // To track question number\r\n  const [feedback, setFeedback] = useState(''); // To display feedback (Correct/Incorrect)\r\n  const [quizFinished, setQuizFinished] = useState(false); // To track quiz finish state\r\n\r\n  // Shuffle questions whenever the quiz starts or resets\r\n  useEffect(() => {\r\n    if (questions.length > 0) {\r\n      // Create a fresh shuffled array of questions\r\n      const shuffledQuestions = [...questions].sort(() => Math.random() - 0.5);\r\n      setAvailableQuestions(shuffledQuestions);\r\n      setAskedQuestions([]); // Reset asked questions at the start\r\n      setQuizFinished(false); // Reset quiz finish state\r\n      getNextQuestion(shuffledQuestions); // Get the first question\r\n    }\r\n  }, [questions]); // Re-run every time the questions change (when the user selects a new category)\r\n\r\n  // Function to get the next question\r\n  const getNextQuestion = (questionPool) => {\r\n    if (questionPool.length === 0) {\r\n      // No more questions left, finish the quiz\r\n      setQuizFinished(true);\r\n      return;\r\n    }\r\n\r\n    // If there are still remaining questions, get the next random question\r\n    const randomIndex = Math.floor(Math.random() * questionPool.length);\r\n    const nextQuestion = questionPool[randomIndex];\r\n\r\n    // Move the question to the asked pool to prevent repetition\r\n    setAskedQuestions((prevAsked) => [...prevAsked, nextQuestion]);\r\n\r\n    // Remove the question from available questions pool\r\n    setAvailableQuestions((prevAvailable) =>\r\n      prevAvailable.filter((_, i) => i !== randomIndex)\r\n    );\r\n\r\n    setCurrentQuestion(nextQuestion); // Set the new current question\r\n    setSelectedAnswer(''); // Reset the selected answer\r\n    setFeedback(''); // Reset feedback\r\n  };\r\n\r\n  // Function to handle submitting the answer\r\n  const handleSubmit = () => {\r\n    if (!selectedAnswer) return; // If no answer is selected, do nothing\r\n\r\n    // Check if the selected answer is correct\r\n    if (selectedAnswer === currentQuestion.answer) {\r\n      setScore(score + 1); // Increment score for correct answer\r\n      setQuestionCount(questionCount + 1); // Increment question count\r\n      setFeedback('Correct!'); // Provide feedback for correct answer\r\n    } else {\r\n      setFeedback('Incorrect!'); // Provide feedback for incorrect answer\r\n      setQuizFinished(true); // End the quiz on incorrect answer\r\n    }\r\n\r\n    // If the answer is correct, get the next question after a brief delay\r\n    setTimeout(() => {\r\n      if (selectedAnswer === currentQuestion.answer) {\r\n        getNextQuestion(availableQuestions); // Move to next question if the answer was correct\r\n      }\r\n    }, 1000); // Wait 1 second before showing the next question\r\n  };\r\n\r\n  // If no more questions are left or the user answers incorrectly, show the results\r\n  if (quizFinished) {\r\n    return (\r\n      <div className=\"quiz-page\">\r\n        <h2>{category} Quiz</h2>\r\n        <p>Quiz finished!</p>\r\n        <p>Your Score: {score}</p>\r\n        <button className=\"back-btn\" onClick={onBack}>← Back to Categories</button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"quiz-page\">\r\n      <h2 className=\"quiz-title\">{category} Quiz</h2>\r\n      <p>Score: {score}</p>\r\n      <p>Question {questionCount + 1}</p>\r\n      <div className=\"quiz-question\">\r\n        <p><strong>{currentQuestion.question}</strong></p>\r\n        <div className=\"quiz-options\">\r\n          {currentQuestion.options.map((option, i) => (\r\n            <label key={i}>\r\n              <input\r\n                type=\"radio\"\r\n                name=\"quiz\"\r\n                value={option}\r\n                checked={selectedAnswer === option}\r\n                onChange={() => setSelectedAnswer(option)}\r\n              />\r\n              {option}\r\n            </label>\r\n          ))}\r\n        </div>\r\n        <button className=\"submit-btn\" onClick={handleSubmit}>Submit</button>\r\n        {feedback && <p className=\"feedback\">{feedback}</p>}\r\n      </div>\r\n      <button className=\"back-btn\" onClick={onBack}>← Back to Categories</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default QuizSubject;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}